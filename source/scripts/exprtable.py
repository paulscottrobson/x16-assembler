# *******************************************************************************************
# *******************************************************************************************
#
#       Name :      exprtable.py
#       Purpose :   Create the tables for expressions
#       Date :      10th August 2023
#       Author :    Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import os,sys,math,re

# *******************************************************************************************
#
#                           Single binary operator class
#
# *******************************************************************************************

class BinaryOperator(object):
    def __init__(self,op,precedence):
        self.op = op
        self.precedence = precedence
        self.label = None
    #
    def getOperator(self):
        return self.op
    def getPrecedence(self):
        return self.precedence
    def getLabel(self):
        return self.label 
    def setLabel(self,lbl):
        self.label = lbl

# *******************************************************************************************
#
#                               Binary operator collection
#
# *******************************************************************************************

class BinaryOperatorCollection(object):
    def __init__(self):
        self.operators = {}
        self.add("& | ^",1) 
        self.add("> = < <> >= <=",2)
        self.add("+ -",3)
        self.add("* / >> << %",4)
    #
    def add(self,opList,precedence):
        for s in opList.split():
            if s != "":
                self.operators[s] = BinaryOperator(s,precedence)
        self.keys = [x for x in self.operators.keys()]
        self.keys.sort(key = lambda x:-len(self.operators[x].getOperator()))
    #
    def scan(self):
        for root,dirs,files in os.walk("../assembler"):            
            for f in [x for x in files if x.endswith(".asm")]:  
                for s in open(root+os.sep+f).readlines():
                    if s.find(";;") > 0 and s.find("[") > 0:        
                        m = re.match("^(.*?)\\:\\s*\\;\\;\\s*\\[(.*?)\\]",s)
                        assert m is not None,"Bad line "+s
                        op = m.group(2).strip()
                        assert op in self.operators,"Unknown operator "+op 
                        assert self.operators[op].getLabel() is None,"Duplicate handler "+op
                        self.operators[op].setLabel(m.group(1))
    #
    def header(self):
        return ";\n;\tThis file is automatically generated.\n;\n\t.section as16code\n"
    def footer(self):
        return "\t.send as16code\n"
    #
    def makeTextTable(self,h):
        h.write(self.header())
        h.write("AXBinaryOperatorList:\n")
        for k in self.keys:
            c2 = ord(k[1]) if len(k) == 2 else 0
            h.write("\t.byte\t${0:02x},${1:02x} ; {2}\n".format(ord(k[0]),c2,k))
        h.write("\t.byte\t$00\n")
        h.write(self.footer())
    #
    def makePrecedenceTable(self,h):
        h.write(self.header())
        h.write("AXPrecedence:\n")
        for k in self.keys:
            h.write("\t.byte\t{0} ; {1}\n".format(self.operators[k].getPrecedence(),k))
        h.write(self.footer())
    #
    def makeVectorTable(self,h):
        h.write(self.header())
        h.write("AXBinaryVectors:\n")
        for k in self.keys:
            v = self.operators[k].getLabel()
            assert v is not None,"No handler for "+k
            h.write("\t.word\t{0:32} ; {1}\n".format(v,k))
        h.write(self.footer())

c = BinaryOperatorCollection()
c.scan()
c.makeTextTable(open("../assembler/generated/__operators.asm","w"))
c.makePrecedenceTable(open("../assembler/generated/__precedence.asm","w"))
c.makeVectorTable(open("../assembler/generated/__vectors.asm","w"))